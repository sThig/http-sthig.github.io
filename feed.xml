<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-07-25T17:06:58-05:00</updated><id>http://localhost:4000/</id><title type="html">Thigpen Designs</title><subtitle>Something, something about me being an awesome designer.</subtitle><entry><title type="html">Switching to Hootstrap</title><link href="http://localhost:4000/update/2018/07/18/switching-to-hootstrap.html" rel="alternate" type="text/html" title="Switching to Hootstrap" /><published>2018-07-18T18:58:00-05:00</published><updated>2018-07-18T18:58:00-05:00</updated><id>http://localhost:4000/update/2018/07/18/switching-to-hootstrap</id><content type="html" xml:base="http://localhost:4000/update/2018/07/18/switching-to-hootstrap.html">&lt;p&gt;I work as a UIUX Designer at ProctorU and we are slowly implementing &lt;a href=&quot;https://proctoru.github.io/hootstrap/&quot;&gt;Hootstrap&lt;/a&gt;, our CSS Framework based off of &lt;a href=&quot;https://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;.  In an effort to know it backwards and forwards I am now stripping my old CSS and exhanging it for Hootstrap’s.&lt;/p&gt;

&lt;p&gt;Since we’ve open sourced Hootstrap, I’m updating the docs with some information.&lt;/p&gt;

&lt;p&gt;When I installed Hootstrap using the instructions, it never worked and there were some extra things that need to go in there.&lt;/p&gt;

&lt;p&gt;Currently our docs state&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;Add this line to your application’s Gemfile:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem 'hootstrap'&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;and-then-execute&quot;&gt;And then execute:&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Some information was missing which was&lt;a href=&quot;https://github.com/envygeeks/jekyll-assets&quot;&gt; jekyll-assets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And update to the &lt;a href=&quot;https://github.com/ProctorU/hootstrap#installation&quot;&gt;docs&lt;/a&gt; would be:&lt;/p&gt;

&lt;h3 id=&quot;installation-1&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;Add this line to your application’s Gemfile:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem 'hootstrap'&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;gem('jekyll-assets')&lt;/code&gt; (if you have not already)&lt;/p&gt;

&lt;p&gt;Add this in your config.yml&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plugins:
  - jekyll-assets
  - hootstrap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;and-then-execute-1&quot;&gt;And then execute:&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ bundle install&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I work as a UIUX Designer at ProctorU and we are slowly implementing Hootstrap, our CSS Framework based off of Bootstrap. In an effort to know it backwards and forwards I am now stripping my old CSS and exhanging it for Hootstrap’s.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-illo.png" /></entry><entry><title type="html">CSS Challenge</title><link href="http://localhost:4000/javascript/css/code/2018/07/17/css-challenge-input.html" rel="alternate" type="text/html" title="CSS Challenge" /><published>2018-07-17T00:00:00-05:00</published><updated>2018-07-17T00:00:00-05:00</updated><id>http://localhost:4000/javascript/css/code/2018/07/17/css-challenge-input</id><content type="html" xml:base="http://localhost:4000/javascript/css/code/2018/07/17/css-challenge-input.html">&lt;p&gt;Did a CSS code challenge where I learned a few new terms&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stylus-lang.com/&quot;&gt;CSS Stylus&lt;/a&gt; (which is like another shorthand for &lt;a href=&quot;http://haml.info/&quot;&gt;HAML&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;It’s almost impossible to &lt;strong&gt;multi-select blocks&lt;/strong&gt; of code like you can do in Atom&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://www.w3schools.com/cssref/css_selectors.asp&quot;&gt;star key&lt;/a&gt; (this –&amp;gt; * ) is CSS code for “&lt;em&gt;select all&lt;/em&gt;”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This project was tricky, not so much because of the HTML or CSS, but writing in CSS Stylus.  My eyes would run together and I never knew what line I was on (much like HAML), so I actually prefer regular ol’ SASS (or CSS) for projects like these.  Still, it was fun to get to do some coded animations.&lt;/p&gt;

&lt;p&gt;None of this code is original, nor mine, it’s by &lt;a href=&quot;https://codepen.io/andreasstorm/pen/JBGWBa?editors=1100&quot;&gt;Andreas Storm&lt;/a&gt;.  I merely used it to learn and mimick some code.  It’s my firm belief that if you code like this often (and consistently), you eventually can do it on your own by way of muscle memory.&lt;/p&gt;

&lt;p&gt;You can see the code and how the animation functions by looking here&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;KBMVWK&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;sthig&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;KBMVWK&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/sthig/pen/KBMVWK/&quot;&gt;KBMVWK&lt;/a&gt; by scott thigpen (&lt;a href=&quot;https://codepen.io/sthig&quot;&gt;@sthig&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">A lesson in subtle CSS animations using Stylus</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-illo.png" /></entry><entry><title type="html">Beta v1 is now live</title><link href="http://localhost:4000/update/2018/07/15/beta-v1-is-now-live.html" rel="alternate" type="text/html" title="Beta v1 is now live" /><published>2018-07-15T18:58:00-05:00</published><updated>2018-07-15T18:58:00-05:00</updated><id>http://localhost:4000/update/2018/07/15/beta-v1-is-now-live</id><content type="html" xml:base="http://localhost:4000/update/2018/07/15/beta-v1-is-now-live.html">&lt;p&gt;It’s taken months to get to this point but Beta version one is now a thing!  I’ve added in a bug alert to let people know I’m beta testing, I’ve gone through a few writing edits (and will be hiring a copywriter) and I’ll be bringing in the artwork relevant to the site just as soon as I draw it (my next big thing on my list)&lt;/p&gt;

&lt;p&gt;Very excited to see this finally becoming a thing!&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s taken months to get to this point but Beta version one is now a thing! I’ve added in a bug alert to let people know I’m beta testing, I’ve gone through a few writing edits (and will be hiring a copywriter) and I’ll be bringing in the artwork relevant to the site just as soon as I draw it (my next big thing on my list)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-illo.png" /></entry><entry><title type="html">Alpha v3 is live</title><link href="http://localhost:4000/update/2018/07/13/alpha-v3-is-live.html" rel="alternate" type="text/html" title="Alpha v3 is live" /><published>2018-07-13T18:58:00-05:00</published><updated>2018-07-13T18:58:00-05:00</updated><id>http://localhost:4000/update/2018/07/13/alpha-v3-is-live</id><content type="html" xml:base="http://localhost:4000/update/2018/07/13/alpha-v3-is-live.html">&lt;p&gt;A lot of refactoring in the CSS, more organized and now just a few things left on the list&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Write out some concise paragraphs for each section&lt;/li&gt;
  &lt;li&gt;Build an archive&lt;/li&gt;
  &lt;li&gt;Get users to test the site&lt;/li&gt;
  &lt;li&gt;Update the About section with examples&lt;/li&gt;
  &lt;li&gt;Create relavent illustrations for each section&lt;/li&gt;
  &lt;li&gt;Add in art mov files into the illustration section&lt;/li&gt;
  &lt;li&gt;Create a changelog section&lt;/li&gt;
  &lt;li&gt;Add in resume link in about (as well as in the console.log for extra nerdiness)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m really excited to see this finally coming together.  It’s been a long and difficult grind to get to this point but I’m super happy with the progress.&lt;/p&gt;</content><author><name></name></author><summary type="html">A lot of refactoring in the CSS, more organized and now just a few things left on the list</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-illo.png" /></entry><entry><title type="html">The Law of Proximity</title><link href="http://localhost:4000/ux/2018/07/12/user-experience-gestalt.html" rel="alternate" type="text/html" title="The Law of Proximity" /><published>2018-07-12T14:52:00-05:00</published><updated>2018-07-12T14:52:00-05:00</updated><id>http://localhost:4000/ux/2018/07/12/user-experience-gestalt</id><content type="html" xml:base="http://localhost:4000/ux/2018/07/12/user-experience-gestalt.html">&lt;p&gt;Recently at work we had dialogue about how the elements on part of software should flow.  We went back and forth on how it should look.  That’s when I went to the &lt;a href=&quot;https://lawsofux.com/&quot;&gt;Laws of UX&lt;/a&gt; and read up on the &lt;a href=&quot;https://lawsofux.com/law-of-proximity&quot;&gt;Law of Proximity&lt;/a&gt; which states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Objects that are near, or proximate to each other, tend to be grouped together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This law is useful because it gives the user a chance to view a lot of information as different clusters at a glance instead of a lot all at once thus overwhelming and possibly skipping important information.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The principles of grouping (or Gestalt laws of grouping) are a set of principles in psychology, first proposed by Gestalt psychologists to account for the observation that humans naturally perceive objects as organized patterns and objects, a principle known as Prägnanz. Gestalt psychologists argued that these principles exist because the mind has an innate disposition to perceive patterns in the stimulus based on certain rules. These principles are organized into five categories: Proximity, Similarity, Continuity, Closure, and Connectedness&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Principles_of_grouping&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Coding a clock with vanilla js and a lot of math</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-illo.png" /></entry><entry><title type="html">Javascript Challenge Clock Face</title><link href="http://localhost:4000/javascript/code/2018/07/07/javascript-challenge-clock-face.html" rel="alternate" type="text/html" title="Javascript Challenge Clock Face" /><published>2018-07-07T13:11:00-05:00</published><updated>2018-07-07T13:11:00-05:00</updated><id>http://localhost:4000/javascript/code/2018/07/07/javascript-challenge-clock-face</id><content type="html" xml:base="http://localhost:4000/javascript/code/2018/07/07/javascript-challenge-clock-face.html">&lt;h3 id=&quot;tick-tock&quot;&gt;Tick Tock&lt;/h3&gt;

&lt;p&gt;Following Wes Bos’s tutorials on vanilla javascript is great and he’s such a good teacher.  He gave a nice run down of how you can use ES6’s template litearals, CSS animations and math to create a functioning clock.&lt;/p&gt;

&lt;h3 id=&quot;what-i-learned&quot;&gt;What I learned&lt;/h3&gt;

&lt;p&gt;More emphasis on &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelector&lt;/code&gt; having it grab the class of each hand of the clock to manipulate it like so:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const hourHand = document.querySelector('.hour-hand');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you have this (and minutes, seconds) you can then apply the math to each hand to rotate on a second, minute or hour (sadly math is not my strong suit so I had to really rely on the internet on how to make stuff rotate according to time).&lt;/p&gt;

&lt;h3 id=&quot;css-animations&quot;&gt;CSS animations&lt;/h3&gt;

&lt;p&gt;This was the fun part for me.  Taking the &lt;code class=&quot;highlighter-rouge&quot;&gt;.hand&lt;/code&gt; class and adding in &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;transition&lt;/code&gt; I was able to get it to rotate not only around in the center (like a wagon wheel) but at a point of origin where I wanted. (Usually ‘transform-origin’ is at 50% and you have to set it at 100%).&lt;/p&gt;

&lt;p&gt;Playing with the cubic-bezier in &lt;code class=&quot;highlighter-rouge&quot;&gt;transition-timing-function&lt;/code&gt; is particularly gratifying when playing with it in the console log.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;  &lt;span class=&quot;nc&quot;&gt;.hand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;50%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;transform-origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;90deg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.05s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;transition-timing-function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cubic-bezier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;the-result&quot;&gt;The Result&lt;/h3&gt;

&lt;p&gt;Here is the code for my clock interface.  I didn’t focus much on style and left it more for Javascript (will get to more styled and well designe stuff, later.)&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-slug-hash=&quot;QxevLW&quot; data-default-tab=&quot;js&quot; data-user=&quot;sthig&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Clock Face Javascript&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/sthig/pen/QxevLW/&quot;&gt;Clock Face Javascript&lt;/a&gt; by scott thigpen (&lt;a href=&quot;https://codepen.io/sthig&quot;&gt;@sthig&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">Coding a clock with vanilla js and a lot of math</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-illo.png" /></entry><entry><title type="html">Javascript for Designers</title><link href="http://localhost:4000/javascript/code/2018/07/06/javascript-for-designers.html" rel="alternate" type="text/html" title="Javascript for Designers" /><published>2018-07-06T14:22:00-05:00</published><updated>2018-07-06T14:22:00-05:00</updated><id>http://localhost:4000/javascript/code/2018/07/06/javascript-for-designers</id><content type="html" xml:base="http://localhost:4000/javascript/code/2018/07/06/javascript-for-designers.html">&lt;p&gt;As a traditional designer and illustrator for over twenty years, making the transition into code, especially aiming for production ready code, is not easy.&lt;/p&gt;

&lt;p&gt;Much like learning how to draw the human body or perfect your &lt;a href=&quot;http://www.matsongraphics.com/graphic-design-blog-huntington-beach/tracking-kerning-leading/tracking-kerning-and-leading&quot;&gt;leading or kerning&lt;/a&gt; in design, coding takes time and patience.&lt;/p&gt;

&lt;p&gt;I was at a &lt;a href=&quot;https://creativesouth.com/&quot;&gt;Creative South&lt;/a&gt;, a convention for designers hoping to meet other code/designers to talk with and was surprised just how much others didn’t know about code.  In fact sometimes when I was chatting about code they stared at my blankly as if I was from another planet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/creative-south.jpg&quot; alt=&quot;Creative South Event&quot; title=&quot;Creative South 2018&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One person I met said he wanted to learn code but didn’t know where to start and it all seemed so daunting to him.  It was then I realized I, as a traditional designer turned code monkey, have the opportunity to share my thoughts about how to get started.&lt;/p&gt;

&lt;p&gt;First and foremost I want to explain how I see front end coding (which is good for a designer, just skip the backend stuff unless you are really, really interested in a new form of Hell).&lt;/p&gt;

&lt;p&gt;The front end consists of three things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTML(Hyper Text Markup Language)&lt;/li&gt;
  &lt;li&gt;CSS (Cascading Stylesheets)&lt;/li&gt;
  &lt;li&gt;Javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; is like the bones of a body, the skeletal structure makes up the what the muscles, joints, tissue, skin all hinge upon.  And speaking of skin, &lt;strong&gt;CSS&lt;/strong&gt; is much like the clothes, looks, appearance you make for yourself.  Lastly &lt;strong&gt;Javascript&lt;/strong&gt; (not &lt;em&gt;Java&lt;/em&gt;) is the commands your brain issues your muscles and bones.&lt;/p&gt;

&lt;p&gt;Take your hand and hold it out in front of you and wave.  Your brain had to tell the muscles to move the bones.  This is my best explanation for Javascript.&lt;/p&gt;

&lt;h2 id=&quot;where-do-i-get-started&quot;&gt;Where do I get started?&lt;/h2&gt;

&lt;p&gt;There’s a lot of places to get started, my favorite is &lt;a href=&quot;https://wesbos.com/&quot;&gt;Wes Bos’s&lt;/a&gt; (&lt;a href=&quot;https://wesbos.com/&quot;&gt;link&lt;/a&gt;) tutorials on CSS Flexbox (&lt;a href=&quot;https://flexbox.io/&quot;&gt;link&lt;/a&gt;), Vanilla Javascript (&lt;a href=&quot;https://javascript30.com/&quot;&gt;link&lt;/a&gt;) and ES6 (&lt;a href=&quot;https://es6.io/&quot;&gt;link&lt;/a&gt;) courses.&lt;/p&gt;

&lt;p&gt;While he expects you to know a little bit of code, Wes’s tutorials are very good and thorough.  I often take them just to keep fresh on my coding skills.&lt;/p&gt;

&lt;p&gt;Another great service is Team Treehouse (&lt;a href=&quot;https://teamtreehouse.com/&quot;&gt;link&lt;/a&gt;) which will start you in the shallow end of the coding pool and ease you into the deep end.  It’s very worth your time if you want to learn more about coding.&lt;/p&gt;

&lt;h2 id=&quot;im-completely-lost&quot;&gt;I’m completely lost&lt;/h2&gt;

&lt;p&gt;Yep, I know that feeling well.  There’s another helpful place called StackOverflow (&lt;a href=&quot;https://stackoverflow.com/questions/43381596/bootstrap-4-navbar-color&quot;&gt;link&lt;/a&gt;) and while it may seem daunting at first, you can ask and also find your question there.  &lt;em&gt;Yes&lt;/em&gt;, the first few times you may not get it right off the bat but keep at it and it becomes a valuable resource to help you.&lt;/p&gt;

&lt;h2 id=&quot;persistance&quot;&gt;Persistance&lt;/h2&gt;

&lt;p&gt;As with anything, persistance will pay off here.  You will get stuck, you will get frustrated and you will walk away from your computer.  But honestly if you continue to hammer at it, there’ll be a breakthrough, I’ve seen it too many times in my own coding challenges.  Just take one chunk of it at a time and master that, move onto the next chunk after that and also remember the words of Calvin Coolidge:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nothing in this world can take the place of persistence. Talent will not: nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education will not: the world is full of educated derelicts. Persistence and determination alone are omnipotent.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html">Coding can be challenging for a designer, here's a basic breakdown.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-illo.png" /></entry><entry><title type="html">Javascript Challenge - Drum Kit</title><link href="http://localhost:4000/javascript/code/2018/07/06/javascript-challenge-drumkit.html" rel="alternate" type="text/html" title="Javascript Challenge - Drum Kit" /><published>2018-07-06T14:22:00-05:00</published><updated>2018-07-06T14:22:00-05:00</updated><id>http://localhost:4000/javascript/code/2018/07/06/javascript-challenge-drumkit</id><content type="html" xml:base="http://localhost:4000/javascript/code/2018/07/06/javascript-challenge-drumkit.html">&lt;p&gt;&lt;a href=&quot;https://www.javascript.com/&quot;&gt;Javascript&lt;/a&gt; for me is difficult (however I think it’s difficult for many people).  I’ve found doing basic coding challenges help you advance quickly by the use of repetition.&lt;/p&gt;

&lt;p&gt;I have found that &lt;a href=&quot;https://wesbos.com/&quot;&gt;Wes Bos’s&lt;/a&gt; coding challenges (&lt;a href=&quot;https://javascript30.com/&quot;&gt;link&lt;/a&gt;) are indeed, &lt;em&gt;boss&lt;/em&gt;.  While I’ve done his &lt;strong&gt;30 days of Javascript&lt;/strong&gt; in the past, I’m revisiting it again as to fine tune where I’m at in my coding career.&lt;/p&gt;

&lt;p&gt;I’m using &lt;a href=&quot;https://codepen.io/&quot;&gt;Code Pen’s&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/&quot;&gt;link&lt;/a&gt;) site to log my challenges and embedding them here.&lt;/p&gt;

&lt;h3 id=&quot;drum-kit-challenge&quot;&gt;Drum Kit Challenge&lt;/h3&gt;

&lt;p&gt;Below is the challenge that was to make a drum kit using vanilla es6 javascript.  What seemed like a simple task ended up being much more difficult than I’d guessed (imagine that, code is hard).&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;light&quot; data-slug-hash=&quot;LrKqga&quot; data-default-tab=&quot;js&quot; data-user=&quot;sthig&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Drum Kit&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/sthig/pen/LrKqga/&quot;&gt;Drum Kit&lt;/a&gt; by scott thigpen (&lt;a href=&quot;https://codepen.io/sthig&quot;&gt;@sthig&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;/h2&gt;

&lt;p&gt;I know HTML and CSS fairly well, honestly I could live in CSS all day long as I enjoy it, it’s a challenge and I love seeing it go live on the screen instantly.  Given this wasn’t a design challenge, I didn’t pay that much attention to style and more focused on the code itself.&lt;/p&gt;

&lt;h3 id=&quot;data-attributes&quot;&gt;Data Attributes&lt;/h3&gt;

&lt;p&gt;In my professional life, data attributes are something used often and it can be particularly confusing.  A data attribute lives within your html and allows someone to make up something specific as long as the word &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; is proceeds the attribute.  So it could be &lt;code class=&quot;highlighter-rouge&quot;&gt;data-music&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;data-key&lt;/code&gt;, but not &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the drum kit challenge, &lt;code class=&quot;highlighter-rouge&quot;&gt;data-key&lt;/code&gt; was referenced several times to call not only an audio wave but also a corresponding key on your keyboard.&lt;/p&gt;

&lt;h3 id=&quot;shh-listen-for-it&quot;&gt;Shh, listen for it&lt;/h3&gt;

&lt;p&gt;It seems event listeners are everywhere in code.  In this coding challenge the first thing I had to look for is when the user hits the key ‘down’, to listen for it.  It’s done by typing&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window.addEventListener('keydown', playSound);&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We are asking javascript to listen for the event of “keydown” on the entire window.  When ‘keydown’ has been executed, run the function ‘playSound’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;to-query-or-query-all-yall&quot;&gt;To Query, or Query All, y’all&lt;/h3&gt;

&lt;p&gt;This part has always been a bit tricky for me with data attributes. What we want to do is query each key pressed and to do that we have an option to query a single keypress or all, here we want just one single One&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const key = document.querySelector(.key[data-key=&quot;${e.keyCode}&quot;]);&lt;/code&gt; (&lt;em&gt;back-tics were removed so the code would highlight properly&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;To break down this strip of code, &lt;code class=&quot;highlighter-rouge&quot;&gt;const&lt;/code&gt; is ES6’s way of saying &lt;strong&gt;variable&lt;/strong&gt; (it’s a constant variable unlike &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; which will let you change the variable).  The const is assigned the word &lt;strong&gt;key&lt;/strong&gt; and what &lt;strong&gt;key&lt;/strong&gt; refers to is a &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelector&lt;/code&gt; which selects an individual element in a document.  (&lt;em&gt;Fwew, that’s a mouthful!&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;I want my &lt;code class=&quot;highlighter-rouge&quot;&gt;querySelector&lt;/code&gt; to reference the class &lt;strong&gt;.key&lt;/strong&gt; (for example &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div data-key=&quot;70&quot; class=&quot;key&quot;&amp;gt;&lt;/code&gt;) and inside that, to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;data-key&lt;/code&gt;.  Using ES6’s template strings (a $ sign) to select &lt;code class=&quot;highlighter-rouge&quot;&gt;${e.keyCode}&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;keyCode: Get the Unicode value of the pressed keyboard key.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bang&quot;&gt;!Bang&lt;/h3&gt;

&lt;p&gt;Bang is one of my favorite commands and what &lt;strong&gt;bang&lt;/strong&gt; means in code is the opposite.  So if I were to open the door, I’d say:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const door = Scott opens the door&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But in code if I wanted to say Scott &lt;em&gt;not&lt;/em&gt; opens the door I’d type&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(!door)&lt;/code&gt; in my code.  Weird, but fun little thing to know.&lt;/p&gt;

&lt;p&gt;In this coding challenge we needed to know that if a key is pressed that doesn’t have an audio file associated with it, we wanted to exit out of the function that issues the audio command.  So for that we needed to say:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if(!audio) return;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The return statement stops the execution of a function and returns a value from that function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;adding-some-class&quot;&gt;Adding some class&lt;/h3&gt;

&lt;p&gt;Being someone who works mostly in CSS and design, I find myself struggling to add and remove classes in Javascript.  It seems like this would be easy but damned if I’m not stumped on it daily and have to scour the internet for answers.  Wes, in his tutorial, sums it up pretty well.&lt;/p&gt;

&lt;p&gt;In the drum kit, to make the little animation happen from the css, you have to add and remove a class.  You do this by &lt;code class=&quot;highlighter-rouge&quot;&gt;classList&lt;/code&gt; (then with the &lt;code class=&quot;highlighter-rouge&quot;&gt;.add&lt;/code&gt; which &lt;code class=&quot;highlighter-rouge&quot;&gt;.remove&lt;/code&gt; works too) in ES6.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;key.classList.add('playing');&lt;/code&gt; (&lt;strong&gt;key&lt;/strong&gt; is the const assigned earlier in this post.).&lt;/p&gt;

&lt;p&gt;This part has always been easier for me, it’s the removal of a class that is difficult.  This part of the challenge was, indeed,  challenging because of &lt;code class=&quot;highlighter-rouge&quot;&gt;transitionend&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The transitionend event is fired when a CSS transition has completed. In the case where a transition is removed before completion, such as if the transition-property is removed or display is set to “none”, then the event will not be generated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s confusing because it sounds like “transitioned” and that’s what my brain defaults to when I’m writing it out.  Then my code breaks and I spend an hour screaming at my computer.&lt;/p&gt;

&lt;p&gt;So if we take:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;const keys = document.querySelectorAll('.key');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and run a &lt;code class=&quot;highlighter-rouge&quot;&gt;forEach&lt;/code&gt; loop on the array of keys with:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The forEach() method executes a provided function once for each array element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;keys.forEach(key =&amp;gt; key.addEventListener('transitionend', removeTransition));&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can tell it to listen for each key, add ‘transitionend’ to it and when that has executed, then run the function, &lt;code class=&quot;highlighter-rouge&quot;&gt;removeTransition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function removeTransition(e) {
  if(e.propertyName !== 'transform') return; //skip it if it's not a transform
  this.classList.remove('playing');
}
&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h3&gt;

&lt;p&gt;I wrote this article specifically for me to regurgitate what I learned from the challenge.  I find that trying to write out what you are saying, or teach it to someone else (or talking to your &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber ducky&lt;/a&gt;) is a great way to cement it in your own brain thus when I’m faced with this in production code, I’m not so intimidated by it.&lt;/p&gt;</content><author><name></name></author><summary type="html">A lesson in query selectors, event listeners and someting called BANG!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-illo.png" /></entry><entry><title type="html">Alpha V2 created!</title><link href="http://localhost:4000/update/2018/07/05/13-38-alpha-v2-created.html" rel="alternate" type="text/html" title="Alpha V2 created!" /><published>2018-07-05T13:38:00-05:00</published><updated>2018-07-05T13:38:00-05:00</updated><id>http://localhost:4000/update/2018/07/05/13-38-alpha-v2-created</id><content type="html" xml:base="http://localhost:4000/update/2018/07/05/13-38-alpha-v2-created.html">&lt;p&gt;A new updated has been created, I’ve put my code on a new, cleaner repo in hopes Github.io catches it and processes it this time.&lt;/p&gt;

&lt;p&gt;Fingers Crossed!&lt;/p&gt;</content><author><name></name></author><summary type="html">A new updated has been created, I’ve put my code on a new, cleaner repo in hopes Github.io catches it and processes it this time.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-illo.png" /></entry><entry><title type="html">Alpha V1 created</title><link href="http://localhost:4000/update/2018/07/05/12-24-alpha-v1-created.html" rel="alternate" type="text/html" title="Alpha V1 created" /><published>2018-07-05T09:37:00-05:00</published><updated>2018-07-05T09:37:00-05:00</updated><id>http://localhost:4000/update/2018/07/05/12-24-alpha-v1-created</id><content type="html" xml:base="http://localhost:4000/update/2018/07/05/12-24-alpha-v1-created.html">&lt;p&gt;A few red-eyed days of coding trying to make the push to get this site up.  I’m happy how things have gone and delighted to see this site finally coming together.  A few tasks I have to still do which are to pay someone to help me write (because I suck at it terribly) and shore up some of the code.&lt;/p&gt;

&lt;p&gt;After that are all the spot illustrations and then I can finally deploy to GitHub Pages.&lt;/p&gt;</content><author><name></name></author><summary type="html">A few red-eyed days of coding trying to make the push to get this site up. I’m happy how things have gone and delighted to see this site finally coming together. A few tasks I have to still do which are to pay someone to help me write (because I suck at it terribly) and shore up some of the code.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/code-illo.png" /></entry></feed>